≡≡≡≡≡≡ ps
    # list time-related info for process
    ps -eo pid,comm,lstart,etime,time,args



≡≡≡≡≡≡ windows|md5
    # check md5
    CertUtil -hashfile <filename> MD5



≡≡≡≡≡≡ rsync
    # use rsync through ssh
    rsync -chavzP --stats user@remote.host:/path/to/copy /path/to/local/storage
    rsync -chavzP -e "ssh -p $portNumber" user@remote.host:/path/to/copy /local/path

    # copy "folder" to "/path/to/upload/folder"
    rsync -chavzP -e "ssh -p 2222" /local/folder user@remote.host:/path/to/upload/



≡≡≡≡≡≡ chrome|chromium
    # print webpage to pdf
    chromium --no-sandbox --headless --disable-gpu --print-to-pdf



≡≡≡≡≡≡ ldap
    ldapsearch -x -H ldap:/// -D "cn=admin,dc=ted,dc=mule" -w admin -b 'ou=Users,domainName=ted.mule,o=domains,dc=ted,dc=mule' "(&(uid=ted))"
    ldapsearch -x -H ldap:/// -D "cn=admin,dc=ted,dc=mule" -W -b 'ou=Users,domainName=ted.mule,o=domains,dc=ted,dc=mule' "(&(uid=ted))"

    # replication check
    ldapsearch -x -H ldap://<provider-host> -D "cn=admin,dc=example,dc=com" -W -b "dc=example,dc=com" "(objectClass=*)" contextCSN



≡≡≡≡≡≡ loki
    ====== logql
    sum(bytes_over_time({app="app-name",host=~"^cowa-iofxw.*"} [$__interval]))

    # filter by regexp
    {project="apisix", app="apisix-internet"} |~ "(?i):8809|TCP"


    === delete log by label
    curl -g -u "username:password" -X POST -H 'X-Scope-OrgID: techcenter''http://127.0.0.1:3100/loki/api/v1/delete?query={foo="bar"}&start=1591616227&end=1591619692' 




≡≡≡≡≡≡ linux
    ====== lvm|scsi
    # scan new disk
    ls /sys/class/scsi_host/ | while read host ; do echo "- - -" > /sys/class/scsi_host/$host/scan ; done

    # extend all vg space to lv
    lvextend -l +100%FREE full-lv-path

    # resize ext filesystem
    resize2fs full-lv-path

    # resize xfs filesystem
    xfs_growfs mount-point


    ====== curl
    # get status_code
    curl -s -o /dev/null -w "%{http_code}" http://www.example.org/

    # simulate SNI
    curl --resolve fruit.ted.mule:8443:192.168.2.91 https://fruit.ted.mule:8443






≡≡≡≡≡≡ docker|compose
    # show container ip
    docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container

    # remove all exited container
    docker ps -f status=exited -q | xargs docker rm






≡≡≡≡≡≡ kubernetes|k8s
    ====== cluster|status|state
        # check cluster status(new method)
        curl -k https://localhost:6443/livez?verbose
        kubectl get --raw='/readyz?verbose'

        # get cidr for pod and service
        kubectl cluster-info dump | grep -m 1 service-cluster-ip-range
        kubectl cluster-info dump | grep -m 1 cluster-cidr

        # or use command below unless the commands above not working
        kubectl get node -o jsonpath='{.items[*].spec.podCIDR}'
        echo '{"apiVersion":"v1","kind":"Service","metadata":{"name":"tst"},"spec":{"clusterIP":"1.1.1.1","ports":[{"port":443}]}}' | kubectl apply -f - 2>&1 | sed 's/.*valid IPs is //'

    ====== kubectl|replace
        # force replace a resource that are unable to update
        kubectl replace -f storageclass-retain.yaml --force


    ====== pod
        kubectl get pod

    ====== pvc|pv
        # delete 'Released' pv
        for pv in $(kubectl get pv | grep Released | awk '{print $1}');do kubectl delete pv $pv --timeout=3s;done

        # patch terminating pv(to delete)
        for pv in $(k get pv | grep Terminating | awk '{print $1}');do kubectl patch pv $pv -p '{"metadata":{"finalizers":[]}}' --type=merge;done

    ====== secret|registry
        kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword> --docker-email=<your-email>
        
    ====== init|chown
        # init command
        chown,-R,472:472,/var/lib/grafana

    ====== log|logs
        # Return snapshot logs from pod nginx with multi containers
        kubectl logs nginx --all-containers=true
        
        # Return snapshot logs from all containers in pods defined by label app=nginx
        kubectl logs -l app=nginx --all-containers=true
        
        # Return snapshot of previous terminated ruby container logs from pod web-1
        kubectl logs -p -c ruby web-1
        
        # Begin streaming the logs of the ruby container in pod web-1
        kubectl logs -f -c ruby web-1
        
        # Begin streaming the logs from all containers in pods defined by label app=nginx
        kubectl logs -f -l app=nginx --all-containers=true
        
        # Display only the most recent 20 lines of output in pod nginx
        kubectl logs --tail=20 nginx
        
        # Show all logs from pod nginx written in the last hour
        kubectl logs --since=1h nginx
        
        # Show logs from a kubelet with an expired serving certificate
        kubectl logs --insecure-skip-tls-verify-backend nginx
        
        # Return snapshot logs from first container of a job named hello
        kubectl logs job/hello
        
        # Return snapshot logs from container nginx-1 of a deployment named nginx
        kubectl logs deployment/nginx -c nginx-1

    ====== sc|storageclass
        # remove default storageclass
        kubectl patch storageclass <storageclass name> -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
        
        # set default storageclass
        kubectl patch storageclass gold -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'







≡≡≡≡≡≡ etcd|etcdctl
    etcdctl --user root:P@ssw0rd --endpoints=http://etcd-0.etcd-headless:2379,http://etcd-1.etcd-headless:2379,http://etcd-2.etcd-headless:2379 endpoint health
    etcdctl --user root:P@ssw0rd --endpoints=http://etcd-0.etcd-headless:2379,http://etcd-1.etcd-headless:2379,http://etcd-2.etcd-headless:2379 endpoint status -w table
    etcdctl --user root:P@ssw0rd --endpoints=http://etcd-0.etcd-headless:2379,http://etcd-1.etcd-headless:2379,http://etcd-2.etcd-headless:2379 get / --prefix --keys-only
    export ENDPOINTS=http://etcd-0.etcd-headless:2379,http://etcd-1.etcd-headless:2379,http://etcd-2.etcd-headless:2379

    # take snapshot
    ETCDCTL_API=3 etcdctl --user root:P@ssw0rd --endpoints http://localhost:2379 snapshot save snapshot.db

    # check snapshot status
    etcdctl snapshot status snapshot.db -w table

    # check revision
    etcdctl --user root:P@ssw0rd --endpoints $ENDPOINTS endpoint status --write-out="json"

    # disable authentication
    etcdctl --user root:P@ssw0rd --endpoints=http://etcd-0.etcd-headless:2379,http://etcd-1.etcd-headless:2379,http://etcd-2.etcd-headless:2379 auth disable

    # connect to remote etcd
    etcdctl --user=root:P@ssw0rd --endpoints=192.168.6.144:30666 user list






≡≡≡≡≡≡ helm|chart
    helm repo add stable http://mirror.azure.cn/kubernetes/charts/
    helm repo list
    
    helm search repo <keyword>
    helm search repo <keyword> -l
    helm search hub redis
    
    helm get manifest <release name>
    
    helm install stable/mysql --generate-name
    helm uninstall mysql-xxxxxx
    
    helm status
    
    helm show values stable/redis-ha > redis-config.yaml
    # modify redis-config.yaml
    helm install -f redis-config.yaml redis-ha stable/redis-ha -n test
    helm upgrade -f redis-config.yaml <release name> <chart name> -n <namespace>
    helm upgrade cilium cilium/cilium --version 1.11.6 -f values.yaml -n kube-system
    
    helm uninstall redis-ha
    
    # Get current release values
    helm -n <namespace> get values <deployed release name> > values.yaml
    
    helm list -n pg-ha
    NAME          NAMESPACE    REVISION    UPDATED                                    STATUS      CHART                   APP VERSION
    postgre-ha    pg-ha        1           2024-02-07 12:35:39.059224538 +0800 CST    deployed    postgresql-ha-13.1.1    16.1.0
    
    helm -n pg-ha upgrade  -f values.yaml postgre-ha bitnami/postgresql-ha --version 13.1.1
    
    
    helm history <release name>
    helm rollback <release name> <revision>
    
    
    helm search repo loki --versions
    # 拉取指定版本tgz到本地
    helm pull bitnami/nginx --version 9.3.1
    helm pull grafana/loki --version 6.7.3
    
    # upload helm chart to repo(chartmuseum)
    curl --data-binary "@promtail-6.16.4.tgz" http://10.254.4.200:8080/api/charts







≡≡≡≡≡≡ ipvs|ipvsadm
    # show ipvs timeout
    ipvsadm -l --timeout
    
    # change ipvs timeout
    ipvsadm --set 3600 120 300
    
    # delete ipvs real server
    ipvsadm -d -t 10.66.0.1:443 -r 10.254.4.100:6443






≡≡≡≡≡≡ conntrack
    conntrack -L
    
    # show max number of connection track
    cat /proc/sys/net/nf_conntrack_max






≡≡≡≡≡≡ namespace|ns
    lsns -t net






≡≡≡≡≡≡ git
    ====== tag
    # show commit id by tag
    git rev-list -n 1 <tag name>

    # delete remote tag
    git push origin tag <tag name> --delete

    ====== branch
    # push local branch to remote
    git push -u origin <branch name>

    git checkut -b test origin/test
    git checkout -b NEW_BRANCH_NAME COMMIT_ID

    # delete remote branch
    git push origin :branchname
    git push origin branchname --delete

    ====== track file
    git log -p -- <filename>
    git show <revision> -- <filename>

    ====== show common ancestor
    git merge-base branch2 branch3

    ====== show related filenames of commit
    git diff-tree --no-commit-id --name-only bd61ad98 -r
    git show --pretty="" --name-only bd61ad98

    ====== merge/rebase
    git checkout master 
    git pull origin master
    git merge/rebase feature
    git push origin master

    ====== show branch track
    git branch -vv






≡≡≡≡≡≡ node|nodejs
    # 默认使用ipv4
    export NODE_OPTIONS="--dns-result-order=ipv4first"
    # use legacy ssl
    export NODE_OPTIONS=--openssl-legacy-provider

    ====== yarn
    # clean cache
    yarn cache clean

    yarn config get registry
    yarn config set registry https://registry.npmmirror.com
    # 恢复官方默认源
    yarn config set registry https://registry.yarnpkg.com
    # 删除源
    yarn config delete registry

    ====== npm
    npm config get registry
    npm config set registry https://registry.npmmirror.com
    # 恢复官方默认源
    npm config set registry https://registry.npmjs.org
    # 删除源
    npm config delete registry
    # 临时使用
    npm --registry https://registry.npmmirror.com install XXX






≡≡≡≡≡≡ jks|keystore
    ====== keytool
        # list
        keytool -list -keystore cert.jks
        keytool -v -list -keystore cert.jks
        keytool -list -keystore cert.jks -alias "alias name"

        # 提取公钥
        keytool -export -alias your_alias -keystore your_keystore.jks -file public_key.crt

        # Change keystore password
        keytool -storepasswd -keystore cert.jks






≡≡≡≡≡≡ ca|openssl
    ====== openssl
        # list root certificates
        awk -v cmd='openssl x509 -noout -subject' '
            /BEGIN/{close(cmd)};{print | cmd}' < /etc/ssl/certs/ca-certificates.crt

        # verify certificate with root CA
        openssl verify -CAfile ca.crt 192.168.6.99.crt

        # or verify cert signed by intermediate CA
        cat intermediate.pem rootCA.pem > chain.pem
        openssl verify -CAfile chain.pem cert.pem

        # 查看HTTPS证书内容
        openssl s_client -showcerts -connect host:443
        openssl s_client -showcerts -connect www.example.com:443 </dev/null
        openssl s_client -showcerts -servername www.example.com -connect <ip>:443 </dev/null

        # check tls versions
        openssl s_client -tls1_1 -connect www.ted.mule:443 -servername www.hexinpass.com </dev/null
        openssl s_client -tls1_2 -connect www.ted.mule:443 -servername www.hexinpass.com </dev/null
        openssl s_client -tls1_3 -connect www.ted.mule:443 -servername www.hexinpass.com </dev/null

        # show san in certificate
        openssl x509 -noout -ext subjectAltName -in server.crt

        # check https with curl(no need to add hosts)
        curl  --resolve www.ted.mule:443:<ip> https://www.ted.mule

        # check cert and key
        openssl x509 -noout -modulus -in certificate.crt | openssl md5
        openssl rsa -noout -modulus -in private.key | openssl md5






≡≡≡≡≡≡ redis
    ====== redis-cli
        # check redis cluster status
        cluster info
        cluster nodes






≡≡≡≡≡≡ kafka
    # generate cluster id 
    cat /proc/sys/kernel/random/uuid | tr -d '-' | base64 | cut -b 1-22

    # show cluster status






≡≡≡≡≡ calico
    # check calico work mode
    calicoctl get ippool -o yaml






≡≡≡≡≡≡ grep
    # search ipv4 text and count
    grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' ips.txt | sort | uniq -c

    # Search IP only
    grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" filename
    # Search IP and port
    grep -oE '\b([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]+\b' filename
    # Search IP URL 
    grep -oE '\bhttp://([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]+[/a-zA-Z0-9?_\.,]+\b' *






≡≡≡≡≡≡ ps
    # show full user name with 20 chars
    ps axo user:20,pid,pcpu,pmem,vsz,rss,tty,stat,start,time,comm






≡≡≡≡≡≡ ipvsadm
    # list ipvs info
    ipvsadm -L -n

    # add a virtual server
    ipvsadm -A -t 192.168.0.100:80 -s rr

    # delete a virtual server
    ipvsadm -D -t 192.168.0.100:80

    # add a real server to virtual server
    ipvsadm -a -t 192.168.0.100:80 -r 192.168.0.101:80 -m
    
    # delete a real server from virtual server
    ipvsadm -d -t 192.168.0.100:80 -r 192.168.0.101:80

    # update a real server's weight
    ipvsadm -e -t 192.168.0.100:80 -r 192.168.0.101:80 -m -w 6

    # clean
    ipvsadm -C
    
    # backup and restore
    ipvsadm -S > /path/to/ipvs_backup.conf
    ipvsadm -R > /path/to/ipvs_backup.conf

    # check status
    ipvsadm -L --stats
    
    # set timeout(tcp, tcpfin, udp)
    ipvsadm --set 30 500 60

    # list current timeout
    ipvsadm -l --timeout






≡≡≡≡≡≡ kvm|virsh
    ====== virsh
    # force shutdown a domain
    virsh shutdown <domain id>
    virsh shutdown <domain name>
    virsh destroy {domain-id, domain-name or domain-uuid} [--graceful]

    # check vm disk
    virsh domblklist <domain name>
    qemu-img check /opt/kvm/qcow2/kf200.qcow2

    # check snapshot of qcow2 file
    qemu-img snapshot -l /opt/kvm/qcow2/my-vm.qcow2






≡≡≡≡≡≡ nginx|haproxy
    ====== haproxy
    # check syntax
    haproxy -f /path/to/haproxy.cfg -c

    # reload 






≡≡≡≡≡≡ tcpdump|wireshark
    ====== wireshark
    # filter tls client hello
    tls.handshake.type==1





≡≡≡≡≡≡ goaccess
    # generate html report
    goaccess access.log -a > report.html

